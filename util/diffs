diff /net/scratch3/fave/sensmg/src/coms.F90 /usr/projects/data/nuclear/working/sensitivities/src/coms.F90
225,228d224
< ! arrays allocated in allocate_arrays3
<   real(R8KIND), allocatable, dimension(:,:,:) :: omia
<   real(R8KIND), allocatable, dimension(:,:,:,:) :: afregas, afadjas, forsa, adjsa
< 
1164,1283d1159
<   subroutine allocate_arrays3()
<     !
<     ! This subroutine is used to allocate several dynamic arrays
<     !
<     integer :: ierr
< 
<     ierr = 0
< 
<     if (allocated(fmom)) &
<        deallocate(fmom, STAT=ierr)
<        if(ierr /= 0)then
<           write(*,'("ERROR.  cannot deallocate array: ",a,".")') &
<                'fmom(neg,0:nmom-1,nitm,njtm)'
<           call stoponerror
<        else
<           write(*,'("deallocated fmom")')
<        end if
< 
<     if (allocated(amom)) &
<        deallocate(amom, STAT=ierr)
<        if(ierr /= 0)then
<           write(*,'("ERROR.  cannot deallocate array: ",a,".")') &
<                'amom(neg,0:nmom-1,nitm,njtm)'
<           call stoponerror
<        else
<           write(*,'("deallocated amom")')
<        end if
< 
<     if (allocated(gmom)) &
<        deallocate(gmom, STAT=ierr)
<        if(ierr /= 0)then
<           write(*,'("ERROR.  cannot deallocate array: ",a,".")') &
<                'gmom(neg,0:nmom-1,nitm,njtm)'
<           call stoponerror
<        else
<           write(*,'("deallocated gmom")')
<        end if
< 
<     if (force_alloc) then
<        deallocate(omia, STAT=ierr)
<        if(ierr /= 0)then
<           write(*,'("ERROR.  cannot deallocate array: ",a,".")') &
<                'omia(neg,0:max(nr,nz),max(nitm,njtm))'
<           call stoponerror
<        end if
<     end if
<     if (.NOT. allocated(omia)) &
<          allocate(omia(neg,0:max(nr,nz),max(nitm,njtm)), STAT=ierr)
<     if(ierr /= 0)then
<        write(*,'("ERROR.  cannot allocate array: ",a,".")') &
<             'omia(neg,0:max(nr,nz),max(nitm,njtm))'
<        call stoponerror
<     end if
< 
<     if (force_alloc) then
<        deallocate(afregas, STAT=ierr)
<        if(ierr /= 0)then
<           write(*,'("ERROR.  cannot deallocate array: ",a,".")') &
<                'afregas(neg,ndir,0:max(nr,nz),max(nitm,njtm))'
<           call stoponerror
<        end if
<     end if
<     if (.NOT. allocated(afregas)) &
<          allocate(afregas(neg,ndir,0:max(nr,nz),max(nitm,njtm)), STAT=ierr)
<     if(ierr /= 0)then
<        write(*,'("ERROR.  cannot allocate array: ",a,".")') &
<             'afregas(neg,ndir,0:max(nr,nz),max(nitm,njtm))'
<        call stoponerror
<     end if
< 
<     if (force_alloc) then
<        deallocate(afadjas, STAT=ierr)
<        if(ierr /= 0)then
<           write(*,'("ERROR.  cannot deallocate array: ",a,".")') &
<                'afadjas(neg,ndir,0:max(nr,nz),max(nitm,njtm))'
<           call stoponerror
<        end if
<     end if
<     if (.NOT. allocated(afadjas)) &
<          allocate(afadjas(neg,ndir,0:max(nr,nz),max(nitm,njtm)), STAT=ierr)
<     if(ierr /= 0)then
<        write(*,'("ERROR.  cannot allocate array: ",a,".")') &
<             'afadjas(neg,ndir,0:max(nr,nz),max(nitm,njtm))'
<        call stoponerror
<     end if
< 
<     if (force_alloc) then
<        deallocate(forsa, STAT=ierr)
<        if(ierr /= 0)then
<           write(*,'("ERROR.  cannot deallocate array: ",a,".")') &
<                'forsa(neg,nmom,0:max(nr,nz),max(nitm,njtm))'
<           call stoponerror
<        end if
<     end if
<     if (.NOT. allocated(forsa)) &
<          allocate(forsa(neg,nmom,0:max(nr,nz),max(nitm,njtm)), STAT=ierr)
<     if(ierr /= 0)then
<        write(*,'("ERROR.  cannot allocate array: ",a,".")') &
<             'forsa(neg,nmom,0:max(nr,nz),max(nitm,njtm))'
<        call stoponerror
<     end if
< 
<     if (force_alloc) then
<        deallocate(adjsa, STAT=ierr)
<        if(ierr /= 0)then
<           write(*,'("ERROR.  cannot deallocate array: ",a,".")') &
<                'adjsa(neg,nmom,0:max(nr,nz),max(nitm,njtm))'
<           call stoponerror
<        end if
<     end if
<     if (.NOT. allocated(adjsa)) &
<          allocate(adjsa(neg,nmom,0:max(nr,nz),max(nitm,njtm)), STAT=ierr)
<     if(ierr /= 0)then
<        write(*,'("ERROR.  cannot allocate array: ",a,".")') &
<             'adjsa(neg,nmom,0:max(nr,nz),max(nitm,njtm))'
<        call stoponerror
<     end if
< 
<     return
<   end subroutine allocate_arrays3
diff /net/scratch3/fave/sensmg/src/adjdir.F /usr/projects/data/nuclear/working/sensitivities/src/adjdir.F
diff /net/scratch3/fave/sensmg/src/block1.F /usr/projects/data/nuclear/working/sensitivities/src/block1.F
diff /net/scratch3/fave/sensmg/src/calcmom.F /usr/projects/data/nuclear/working/sensitivities/src/calcmom.F
diff /net/scratch3/fave/sensmg/src/calcsens.F /usr/projects/data/nuclear/working/sensitivities/src/calcsens.F
164,165d163
< c set this to pass in to other routines; is not used for n.ne.0
<           fissd=1.d0
166a165
>             fissd=1.d0
413,427c412,426
<           sden(n,1:neg,1:nsen)=sden(n,1:neg,1:nsen)*fissd
<           stot(n,1:neg,1:nsen)=stot(n,1:neg,1:nsen)*fissd
<           sabs(n,1:neg,1:nsen)=sabs(n,1:neg,1:nsen)*fissd
<           scap(n,1:neg,1:nsen)=scap(n,1:neg,1:nsen)*fissd
<           sfis(n,1:neg,1:nsen)=sfis(n,1:neg,1:nsen)*fissd
<           sins(n,1:neg,1:nsen)=sins(n,1:neg,1:nsen)*fissd
<           snu(n,1:neg,1:neg,1:nsen)=snu(n,1:neg,1:neg,1:nsen)*fissd
<           ssct(n,1:neg,1:neg,0:isct,1:nsen)=
<      1     ssct(n,1:neg,1:neg,0:isct,1:nsen)*fissd
<           sscti(n,1:neg,0:isct,1:nsen)=
<      1     sscti(n,1:neg,0:isct,1:nsen)*fissd
<           sscto(n,1:neg,0:isct,1:nsen)=
<      1     sscto(n,1:neg,0:isct,1:nsen)*fissd
<           sscts(n,1:neg,0:isct,1:nsen)=
<      1     sscts(n,1:neg,0:isct,1:nsen)*fissd
---
>           sden(0,1:neg,1:nsen)=sden(0,1:neg,1:nsen)*fissd
>           stot(0,1:neg,1:nsen)=stot(0,1:neg,1:nsen)*fissd
>           sabs(0,1:neg,1:nsen)=sabs(0,1:neg,1:nsen)*fissd
>           scap(0,1:neg,1:nsen)=scap(0,1:neg,1:nsen)*fissd
>           sfis(0,1:neg,1:nsen)=sfis(0,1:neg,1:nsen)*fissd
>           sins(0,1:neg,1:nsen)=sins(0,1:neg,1:nsen)*fissd
>           snu(0,1:neg,1:neg,1:nsen)=snu(0,1:neg,1:neg,1:nsen)*fissd
>           ssct(0,1:neg,1:neg,0:isct,1:nsen)=
>      1     ssct(0,1:neg,1:neg,0:isct,1:nsen)*fissd
>           sscti(0,1:neg,0:isct,1:nsen)=
>      1     sscti(0,1:neg,0:isct,1:nsen)*fissd
>           sscto(0,1:neg,0:isct,1:nsen)=
>      1     sscto(0,1:neg,0:isct,1:nsen)*fissd
>           sscts(0,1:neg,0:isct,1:nsen)=
>      1     sscts(0,1:neg,0:isct,1:nsen)*fissd
diff /net/scratch3/fave/sensmg/src/calcsens_d.F /usr/projects/data/nuclear/working/sensitivities/src/calcsens_d.F
diff /net/scratch3/fave/sensmg/src/calcsens_r.F /usr/projects/data/nuclear/working/sensitivities/src/calcsens_r.F
73a74,75
>           call integrals_r_2d(0,lam,rlip,fmom,amom,afreg,afadj,neg0,
>      1     ndir0,nitm0,njtm0,dtgr,dsgr,dfgr,dqgr,dtgz,dsgz,dfgz,dqgz)
77,78d78
<             call integrals_r_2d(0,lam,rlip,fmom,amom,afreg,afadj,neg0,
<      1       ndir0,nitm0,njtm0,dtgr,dsgr,dfgr,dqgr,dtgz,dsgz,dfgz,dqgz)
84,86c84
< c             write(*,'("calcsens_r",6i6)')nr,nz,max(nr,nz),it,jt,
< c    1         max(it,jt)
<               call integrals_r_2d_as(lam,rlip,max(nr,nz),max(it,jt),
---
>               call integrals_r_2d_as(lam,rlip,
diff /net/scratch3/fave/sensmg/src/fissip.F /usr/projects/data/nuclear/working/sensitivities/src/fissip.F
diff /net/scratch3/fave/sensmg/src/fixedsrc.F /usr/projects/data/nuclear/working/sensitivities/src/fixedsrc.F
diff /net/scratch3/fave/sensmg/src/gamadj.F /usr/projects/data/nuclear/working/sensitivities/src/gamadj.F
diff /net/scratch3/fave/sensmg/src/gamadj0.F /usr/projects/data/nuclear/working/sensitivities/src/gamadj0.F
44c44
< c Stacey's Eq. (1.1.15) divided by G3 (G3 is the ratio)
---
> c Stacey's Eq. (1.1.15) divided by G3 which is ratio
diff /net/scratch3/fave/sensmg/src/integrals.F /usr/projects/data/nuclear/working/sensitivities/src/integrals.F
diff /net/scratch3/fave/sensmg/src/integrals_r_1d.F /usr/projects/data/nuclear/working/sensitivities/src/integrals_r_1d.F
diff /net/scratch3/fave/sensmg/src/integrals_r_2d.F /usr/projects/data/nuclear/working/sensitivities/src/integrals_r_2d.F
diff /net/scratch3/fave/sensmg/src/integrals_r_2d_as.F /usr/projects/data/nuclear/working/sensitivities/src/integrals_r_2d_as.F
1c1
<       subroutine integrals_r_2d_as(lam,rlip,mp1,mp2,
---
>       subroutine integrals_r_2d_as(lam,rlip,
12,19c12,14
<       integer mp1,mp2
< c     real*8 omia(neg,0:max(nr,nz),max(it,jt)),
< c    1 forsa(neg,1:nmom,0:max(nr,nz),max(it,jt)),
< c    2 adjsa(neg,1:nmom,0:max(nr,nz),max(it,jt))
< c     real*8 omia(neg,0:mp1,mp2),
< c    1 forsa(neg,1:nmom,0:mp1,mp2),
< c    2 adjsa(neg,1:nmom,0:mp1,mp2)
<        real*8
---
>       real*8 omi(neg,0:max(nr,nz),max(it,jt)),
>      1 fors(neg,1:nmom,0:max(nr,nz),max(it,jt)),
>      2 adjs(neg,1:nmom,0:max(nr,nz),max(it,jt)),
23,36c18,24
< c     real*8 afregas(neg,ndir,0:max(nr,nz),max(it,jt)),
< c    1 afadjas(neg,ndir,0:max(nr,nz),max(it,jt))
< c     real*8 afregas(neg,ndir,0:mp1,mp2),
< c    1 afadjas(neg,ndir,0:mp1,mp2)
< c
< c omia, forsa, and adjsa are used for radial and axial surfaces.
< c DEBUG
< c     write(*,'("integrals_r_2d_as",8i6)')nr,nz,mp1,it,jt,nitm,njtm,mp2
< c TEST
<       call allocate_arrays3
< c TEST
<       omia(1:neg,0:mp1,1:mp2)=0.d0
<       forsa(1:neg,1:nmom,0:mp1,1:mp2)=0.d0
<       adjsa(1:neg,1:nmom,0:mp1,1:mp2)=0.d0
---
>       real*8 afregas(neg,ndir,0:max(nr,nz),max(it,jt)),
>      1 afadjas(neg,ndir,0:max(nr,nz),max(it,jt))
> c
> c omi, fors, and adjs are used for radial and axial surfaces.
>       omi(1:neg,0:max(nr,nz),1:max(it,jt))=0.d0
>       fors(1:neg,1:nmom,0:max(nr,nz),1:max(it,jt))=0.d0
>       adjs(1:neg,1:nmom,0:max(nr,nz),1:max(it,jt))=0.d0
75c63
<             forsa(ng,1:nmom,ir,j)=forsa(ng,1:nmom,ir,j)
---
>             fors(ng,1:nmom,ir,j)=fors(ng,1:nmom,ir,j)
77c65
<             adjsa(ng,1:nmom,ir,j)=adjsa(ng,1:nmom,ir,j)
---
>             adjs(ng,1:nmom,ir,j)=adjs(ng,1:nmom,ir,j)
79c67
<             omia(ng,ir,j)=omia(ng,ir,j)+wgt(m)*afregas(ng,m,ir,j)
---
>             omi(ng,ir,j)=omi(ng,ir,j)+wgt(m)*afregas(ng,m,ir,j)
85,86c73,74
< c       write(47,'(i6,1p20e14.6)')j,forsa(1,1:nmom,ir,j)
< c       write(48,'(i6,1p20e14.6)')j,adjsa(1,1:nmom,ir,j)
---
> c       write(47,'(i6,1p20e14.6)')j,fors(1,1:nmom,ir,j)
> c       write(48,'(i6,1p20e14.6)')j,adjs(1,1:nmom,ir,j)
109,110c97,98
<             dqgr(ng,ir,jr)=dqgr(ng,ir,jr)+adjsa(ng,1,ir,j)*sa
<             dtgr(ng,ir,jr)=dtgr(ng,ir,jr)+omia(ng,ir,j)*sa
---
>             dqgr(ng,ir,jr)=dqgr(ng,ir,jr)+adjs(ng,1,ir,j)*sa
>             dtgr(ng,ir,jr)=dtgr(ng,ir,jr)+omi(ng,ir,j)*sa
114c102
<               st=lam*adjsa(ng,1,ir,j)*sa
---
>               st=lam*adjs(ng,1,ir,j)*sa
117c105
<      1           *forsa(lg,1,ir,j)
---
>      1           *fors(lg,1,ir,j)
133c121
<                 st=adjsa(ng,ll,ir,j)*rlsa
---
>                 st=adjs(ng,ll,ir,j)*rlsa
136c124
<      1             *forsa(lg,ll,ir,j)
---
>      1             *fors(lg,ll,ir,j)
165c153
< c omia, forsa, and adjsa are used for radial and axial surfaces.
---
> c omi, fors, and adjs are used for radial and axial surfaces.
172,174c160,162
<       omia(1:neg,0:mp1,1:mp2)=0.d0
<       forsa(1:neg,1:nmom,0:mp1,1:mp2)=0.d0
<       adjsa(1:neg,1:nmom,0:mp1,1:mp2)=0.d0
---
>       omi(1:neg,0:max(nr,nz),1:max(it,jt))=0.d0
>       fors(1:neg,1:nmom,0:max(nr,nz),1:max(it,jt))=0.d0
>       adjs(1:neg,1:nmom,0:max(nr,nz),1:max(it,jt))=0.d0
187c175
<             forsa(ng,1:nmom,jr,i)=forsa(ng,1:nmom,jr,i)
---
>             fors(ng,1:nmom,jr,i)=fors(ng,1:nmom,jr,i)
189c177
<             adjsa(ng,1:nmom,jr,i)=adjsa(ng,1:nmom,jr,i)
---
>             adjs(ng,1:nmom,jr,i)=adjs(ng,1:nmom,jr,i)
191c179
<             omia(ng,jr,i)=omia(ng,jr,i)+wgt(m)*afregas(ng,m,jr,i)
---
>             omi(ng,jr,i)=omi(ng,jr,i)+wgt(m)*afregas(ng,m,jr,i)
197,198c185,186
< c       write(47,'(i6,1p20e14.6)')i,forsa(1,1:nmom,jr,i)
< c       write(48,'(i6,1p20e14.6)')i,adjsa(1,1:nmom,jr,i)
---
> c       write(47,'(i6,1p20e14.6)')i,fors(1,1:nmom,jr,i)
> c       write(48,'(i6,1p20e14.6)')i,adjs(1,1:nmom,jr,i)
221,222c209,210
<             dqgz(ng,ir,jr)=dqgz(ng,ir,jr)+adjsa(ng,1,jr,i)*sa
<             dtgz(ng,ir,jr)=dtgz(ng,ir,jr)+omia(ng,jr,i)*sa
---
>             dqgz(ng,ir,jr)=dqgz(ng,ir,jr)+adjs(ng,1,jr,i)*sa
>             dtgz(ng,ir,jr)=dtgz(ng,ir,jr)+omi(ng,jr,i)*sa
226c214
<               st=lam*adjsa(ng,1,jr,i)*sa
---
>               st=lam*adjs(ng,1,jr,i)*sa
229c217
<      1           *forsa(lg,1,jr,i)
---
>      1           *fors(lg,1,jr,i)
245c233
<                 st=adjsa(ng,ll,jr,i)*rlsa
---
>                 st=adjs(ng,ll,jr,i)*rlsa
248c236
<      1             *forsa(lg,ll,jr,i)
---
>      1             *fors(lg,ll,jr,i)
diff /net/scratch3/fave/sensmg/src/integrals_r_2d_bs.F /usr/projects/data/nuclear/working/sensitivities/src/integrals_r_2d_bs.F
diff /net/scratch3/fave/sensmg/src/momcon.F /usr/projects/data/nuclear/working/sensitivities/src/momcon.F
diff /net/scratch3/fave/sensmg/src/numrec.F /usr/projects/data/nuclear/working/sensitivities/src/numrec.F
diff /net/scratch3/fave/sensmg/src/output1.F /usr/projects/data/nuclear/working/sensitivities/src/output1.F
diff /net/scratch3/fave/sensmg/src/output2.F /usr/projects/data/nuclear/working/sensitivities/src/output2.F
diff /net/scratch3/fave/sensmg/src/output3.F /usr/projects/data/nuclear/working/sensitivities/src/output3.F
diff /net/scratch3/fave/sensmg/src/output4.F /usr/projects/data/nuclear/working/sensitivities/src/output4.F
diff /net/scratch3/fave/sensmg/src/rdafgad.F /usr/projects/data/nuclear/working/sensitivities/src/rdafgad.F
diff /net/scratch3/fave/sensmg/src/rdbxslib.F /usr/projects/data/nuclear/working/sensitivities/src/rdbxslib.F
diff /net/scratch3/fave/sensmg/src/rdctrl.F /usr/projects/data/nuclear/working/sensitivities/src/rdctrl.F
diff /net/scratch3/fave/sensmg/src/rddanta.F /usr/projects/data/nuclear/working/sensitivities/src/rddanta.F
diff /net/scratch3/fave/sensmg/src/rddantas.F /usr/projects/data/nuclear/working/sensitivities/src/rddantas.F
diff /net/scratch3/fave/sensmg/src/rddantbs.F /usr/projects/data/nuclear/working/sensitivities/src/rddantbs.F
diff /net/scratch3/fave/sensmg/src/rddantk.F /usr/projects/data/nuclear/working/sensitivities/src/rddantk.F
diff /net/scratch3/fave/sensmg/src/rddantm.F /usr/projects/data/nuclear/working/sensitivities/src/rddantm.F
diff /net/scratch3/fave/sensmg/src/rdgendir.F /usr/projects/data/nuclear/working/sensitivities/src/rdgendir.F
diff /net/scratch3/fave/sensmg/src/rdgmom.F /usr/projects/data/nuclear/working/sensitivities/src/rdgmom.F
diff /net/scratch3/fave/sensmg/src/rdmacrxs.F /usr/projects/data/nuclear/working/sensitivities/src/rdmacrxs.F
diff /net/scratch3/fave/sensmg/src/rdmisc.F /usr/projects/data/nuclear/working/sensitivities/src/rdmisc.F
diff /net/scratch3/fave/sensmg/src/rdmdl.F /usr/projects/data/nuclear/working/sensitivities/src/rdmdl.F
7c7
<       integer i,i0,j,j0,ia,ir,jr,k,n,n1,ios,mdrdz,mtr(nm),mt,
---
>       integer i,i0,j,j0,ir,jr,k,n,n1,ios,mdrdz,mtr(nm),mt,
164,188d163
< c ensure all are positive or negative. preparation for allowing
< c atom fractions; not fully implemented.
<         if(blk(2,lcm(i)).lt.0.d0)then
<           ia=-1
<         else if(blk(2,lcm(i)).gt.0.d0)then
<           ia=1
<         else
<           ia=0
<         end if
<         do j=lcm(i)+1,lcm(i)+ncb(i)-1
<           if((ia.eq.-1.and.blk(2,j).gt.0.d0).or.
<      1     (ia.eq.1.and.blk(2,j).lt.0.d0))then
<             write(*,'("error. material",i5," has positives and ",
<      1       "negatives.")')i
<             write(iuo,'("error. material",i5," has positives and ",
<      1       "negatives.")')i
<             call stoponerror
<           else if(ia.eq.0.or.blk(2,j).eq.0.d0)then
<             write(*,'("error. material",i5," has a nuclide with ",
<      1       "zero mass.")')i
<             write(iuo,'("error. material",i5," has a nuclide with ",
<      1       "zero mass.")')i
<             call stoponerror
<           end if
<         end do ! j
192c167
<           sumw=sumw+abs(blk(2,j))
---
>           sumw=sumw+blk(2,j)
282d256
< c (for fixed-source, will not divide by flux; see rxnrateedit.)
diff /net/scratch3/fave/sensmg/src/rdsnxedt.F /usr/projects/data/nuclear/working/sensitivities/src/rdsnxedt.F
diff /net/scratch3/fave/sensmg/src/rdsources.F /usr/projects/data/nuclear/working/sensitivities/src/rdsources.F
diff /net/scratch3/fave/sensmg/src/rdsources_pdata.F /usr/projects/data/nuclear/working/sensitivities/src/rdsources_pdata.F
7c7
<       real*8 atdens,tt1,tt2,tt3,term1(maxval(ncb(1:nm))),
---
>       real*8 atdens,tt,term1(maxval(ncb(1:nm))),
24,26c24,26
<       term1(1:ncb(i))=0.d0 ! target
<       term2(1:ncb(i))=0.d0 ! source
<       term3(1:ncb(i))=0.d0 ! stopping
---
>       term1(1:ncb(i))=0.d0
>       term2(1:ncb(i))=0.d0
>       term3(1:ncb(i))=0.d0
74,76c74,76
< c tt1 is sum_l fal*Pi
<         read(iun,'(18x,e15.7)',iostat=ios)tt1
< c get term1 for target. first term in Eq. (21).
---
> c tt is sum_l fal*Pi
>         read(iun,'(18x,e15.7)',iostat=ios)tt
> c get term1 for target
90,91c90,91
<    50   term1(j)=term1(j)+alam*aq/blk(3,k2)*tt1
< c get term2 for source. second term in Eq. (21).
---
>    50   term1(j)=term1(j)+alam*aq/blk(3,k2)*tt
> c get term3 for source
102,104c102,103
<    60   term2(j)=term2(j)+alam*tt1
< c get term3 for stopping elements (all isotopes). third term in
< c Eq. (21).
---
>    60   term3(j)=term3(j)+alam*tt
> c get term2 for stopping elements (all isotopes)
108c107
<           read(iun,'(4x,i4,2e15.7)')jzm,azm,tt2
---
>           read(iun,'(4x,i4,2e15.7)')jzm,azm,tt
113c112
< c tt2 is the sum over l in term 3 of Eq. (21).
---
> c tt is the sum over l in Sophie's Eq. (19) (term 2).
116,118c115,116
< c these are the same equation.
< c             term3(j)=term3(j)+alam*aq*tt2*blk(3,k2)/azm/atdens**2
<               term3(j)=term3(j)+alam*aq/atdens*tt2
---
> c             term2(j)=term2(j)+alam*aq*tt*blk(3,k2)/azm/atdens**2
>               term2(j)=term2(j)+alam*aq/atdens*tt
124,125c122,123
<       term2(1:ncb(i))=term2(1:ncb(i))*1.d24
<       term3(1:ncb(i))=-term3(1:ncb(i))*1.d24
---
>       term2(1:ncb(i))=-term2(1:ncb(i))*1.d24
>       term3(1:ncb(i))=term3(1:ncb(i))*1.d24
130,131c128,129
<      1 /,"  isotope",3x,"target",9x,"alpha_src",6x,"stop.elem.",
<      2 5x,"total")')i
---
>      1 /,"  isotope",3x,"target",9x,"stop.elem.",5x,"alpha_src",
>      2 6x,"total")')i
174c172
<         read(iun,'(6x,e15.7)',iostat=ios)tt3
---
>         read(iun,'(6x,e15.7)',iostat=ios)tt
176c174
<           tot_tar=tot_tar+tt3
---
>           tot_tar=tot_tar+tt
178c176
<           tot_src=tot_src+tt3
---
>           tot_src=tot_src+tt
196c194
<       read(iun,'(6x,e15.7)',iostat=ios)tt3
---
>       read(iun,'(6x,e15.7)',iostat=ios)tt
202c200
<      4 tot_tar/an_norm,tot_src,tot_src/an_norm,tt3,tt3/an_norm
---
>      4 tot_tar/an_norm,tot_src,tot_src/an_norm,tt,tt/an_norm
diff /net/scratch3/fave/sensmg/src/rdxsmg.F /usr/projects/data/nuclear/working/sensitivities/src/rdxsmg.F
diff /net/scratch3/fave/sensmg/src/rdxsmg0.F /usr/projects/data/nuclear/working/sensitivities/src/rdxsmg0.F
diff /net/scratch3/fave/sensmg/src/rxnrateedit.F /usr/projects/data/nuclear/working/sensitivities/src/rxnrateedit.F
diff /net/scratch3/fave/sensmg/src/sensmg.F /usr/projects/data/nuclear/working/sensitivities/src/sensmg.F
diff /net/scratch3/fave/sensmg/src/set_ebins.F /usr/projects/data/nuclear/working/sensitivities/src/set_ebins.F
17c17
<       character group_structure_files(nf)*12
---
>       character group_structure_files(nf)*20
25,45c25,45
<      & "091_lanl",
<      & "075_lanl",
<      & "070_lanl",
<      & "049_lanl",
<      & "047_lanl",
<      & "030_lanl",
<      & "021_lanl",
<      & "016_lanl",
<      & "014_lanl",
<      & "013_lanl",
<      & "012_lanl",
<      & "010_lanl",
<      & "009_lanl",
<      & "008_lanl",
<      & "007_lanl",
<      & "006_lanl",
<      & "005_lanl",
<      & "004_lanl",
<      & "003_lanl",
<      & "002_lanl",
<      & "001_lanl",
---
>      & "91_lanl",
>      & "75_lanl",
>      & "70_lanl",
>      & "49_lanl",
>      & "47_lanl",
>      & "30_lanl",
>      & "21_lanl",
>      & "16_lanl",
>      & "14_lanl",
>      & "13_lanl",
>      & "12_lanl",
>      & "10_lanl",
>      & "9_lanl",
>      & "8_lanl",
>      & "7_lanl",
>      & "6_lanl",
>      & "5_lanl",
>      & "4_lanl",
>      & "3_lanl",
>      & "2_lanl",
>      & "1_lanl",
47,53c47,53
<      & "079_kynea3"
< c    & "016_lanl2",
< c    & "012_lanl2",
< c    & "002_lanl2",
< c    & "087_llnl",
< c    & "017_llnl",
< c    & "016_llnl",
---
>      & "79_kynea3"
> c    & "16_lanl2",
> c    & "12_lanl2",
> c    & "2_lanl2",
> c    & "87_llnl",
> c    & "17_llnl",
> c    & "16_llnl",
55c55
< c    & "016_hr",
---
> c    & "16_hr",
57,60c57,59
< c group structures 087_llnl, 017_llnl, 016_llnl, 105_awe, and 016_hr
< c exist, but because there is no logic to use these in partisn, they
< c are not allowed in sensmg. same with 016_lanl2, 012_lanl2, and
< c 002_lanl2.
---
> c group structures 87_llnl, 17_llnl, 16_llnl, 105_awe, and 16_hr exist,
> c but because there is no logic to use these in partisn, they are not
> c allowed. same with 16_lanl2, 12_lanl2, and 2_lanl2.
62c61
<       write(gfile,'(i3.3)')neg
---
>       write(gfile,'(i6)')neg
diff /net/scratch3/fave/sensmg/src/seteff.F /usr/projects/data/nuclear/working/sensitivities/src/seteff.F
diff /net/scratch3/fave/sensmg/src/srcip.F /usr/projects/data/nuclear/working/sensitivities/src/srcip.F
diff /net/scratch3/fave/sensmg/src/stoponerror.F /usr/projects/data/nuclear/working/sensitivities/src/stoponerror.F
diff /net/scratch3/fave/sensmg/src/temp_integrals_mom.F /usr/projects/data/nuclear/working/sensitivities/src/temp_integrals_mom.F
diff /net/scratch3/fave/sensmg/src/velip.F /usr/projects/data/nuclear/working/sensitivities/src/velip.F
diff /net/scratch3/fave/sensmg/src/version.F /usr/projects/data/nuclear/working/sensitivities/src/version.F
5,6c5,6
<       character(8), parameter :: versn = "4.2.2   "
<       character(8), parameter :: datev = "20171205"
---
>       character(8), parameter :: versn = "4.2.0   "
>       character(8), parameter :: datev = "20171106"
diff /net/scratch3/fave/sensmg/src/wrafgad.F /usr/projects/data/nuclear/working/sensitivities/src/wrafgad.F
diff /net/scratch3/fave/sensmg/src/wrdantga.F /usr/projects/data/nuclear/working/sensitivities/src/wrdantga.F
diff /net/scratch3/fave/sensmg/src/wrdantnm.F /usr/projects/data/nuclear/working/sensitivities/src/wrdantnm.F
diff /net/scratch3/fave/sensmg/src/wrdantxs.F /usr/projects/data/nuclear/working/sensitivities/src/wrdantxs.F
diff /net/scratch3/fave/sensmg/src/wrfixsrc.F /usr/projects/data/nuclear/working/sensitivities/src/wrfixsrc.F
diff /net/scratch3/fave/sensmg/src/wrgmom.F /usr/projects/data/nuclear/working/sensitivities/src/wrgmom.F
diff /net/scratch3/fave/sensmg/src/wrmacrsx.F /usr/projects/data/nuclear/working/sensitivities/src/wrmacrsx.F
diff /net/scratch3/fave/sensmg/src/wrmisc.F /usr/projects/data/nuclear/working/sensitivities/src/wrmisc.F
diff /net/scratch3/fave/sensmg/src/wrodninp.F /usr/projects/data/nuclear/working/sensitivities/src/wrodninp.F
diff /net/scratch3/fave/sensmg/src/wrodninp2.F /usr/projects/data/nuclear/working/sensitivities/src/wrodninp2.F
diff /net/scratch3/fave/sensmg/src/wrsources.F /usr/projects/data/nuclear/working/sensitivities/src/wrsources.F
diff /net/scratch3/fave/sensmg/src/Makefile.Snow.checkbounds.Intel /usr/projects/data/nuclear/working/sensitivities/src/Makefile.Snow.checkbounds.Intel
/usr/projects/data/nuclear/working/sensitivities/src/Makefile.Snow.checkbounds.Intel does not exist
diff /net/scratch3/fave/sensmg/src/Makefile /usr/projects/data/nuclear/working/sensitivities/src/Makefile
diff /net/scratch3/fave/sensmg/bin/sensmg.py /usr/projects/data/nuclear/working/sensitivities/bin/sensmg.py
49,50c49
< # sensmg_exe = "/usr/projects/data/nuclear/working/sensitivities/bin/sensmg"
< sensmg_exe = "/net/scratch3/fave/sensmg/bin/sensmg"
---
> sensmg_exe = "/usr/projects/data/nuclear/working/sensitivities/bin/sensmg"
131a131
> # not sure when 1 as appropriate.
273c273
<         SENS_PARTISN = "/usr/projects/lindet/rel8_27/8_27_15/snow-intel-17.0.4-openmpi-2.1.2/partisn"
---
>         SENS_PARTISN = "/usr/projects/lindet/rel8_27/8_27_14/snow-intel-17.0.4-openmpi-2.1.2/partisn"
275c275
<         SENS_PARTISN = "/usr/projects/lindet/rel8_27/8_27_15/frost-intel-17.0.4-openmpi-2.1.2/partisn"
---
>         SENS_PARTISN = "/usr/projects/lindet/rel8_27/8_27_14/frost-intel-17.0.4-openmpi-2.1.2/partisn"
277c277
<         SENS_PARTISN = "/usr/projects/lindet/rel8_27/8_27_15/moonlight-intel-17.0.4-openmpi-2.1.2/partisn"
---
>         SENS_PARTISN = "/usr/projects/lindet/rel8_27/8_27_14/moonlight-intel-17.0.4-openmpi-2.1.2/partisn"
279c279
<         SENS_PARTISN = "/usr/projects/lindet/rel8_27/8_27_15/luna-intel-17.0.4-openmpi-2.1.2/partisn"
---
>         SENS_PARTISN = "/usr/projects/lindet/rel8_27/8_27_14/luna-intel-17.0.4-openmpi-2.1.2/partisn"
301,302c301,302
< elif "8_27_15" in PARTISN_EXE:
<     PART_SHORT = "8_27_15"
---
> elif "8_27_14" in PARTISN_EXE:
>     PART_SHORT = "8_27_14"
307,308c307,308
<     print "error. the only versions of partisn supported are 5_97, 7_72, 8_03, 8_20a, and 8_27_15."
<     log.write("error. the only versions of partisn supported are 5_97, 7_72, 8_03, 8_20a, and 8_27_15.\n")
---
>     print "error. the only versions of partisn supported are 5_97, 7_72, 8_03, 8_20a, and 8_27_14."
>     log.write("error. the only versions of partisn supported are 5_97, 7_72, 8_03, 8_20a, and 8_27_14.\n")
343c343
<         elif "8_27_15" in PARTISN_EXE:
---
>         elif "8_27_14" in PARTISN_EXE:
620d619
<     SENS_DATA = os.environ.get("SENS_DATA")
625c624
<                 os.symlink(SENS_DATA+"/sandia.neutronxs.kynea3.bxs", lnk)
---
>                 os.symlink("/usr/projects/data/nuclear/working/sensitivities/data/sandia.neutronxs.kynea3.bxs", lnk)
630c629
<                 os.symlink(SENS_DATA+"/vitb6.xslib", lnk)
---
>                 os.symlink("/usr/projects/data/nuclear/working/sensitivities/data/vitb6.xslib", lnk)
635c634
<                 os.symlink(SENS_DATA+"/bxslib.scale.44", lnk)
---
>                 os.symlink("/usr/projects/data/nuclear/working/sensitivities/data/bxslib.scale.44", lnk)
647,649d645
<     to_rm = glob.glob("a[0-9][0-9]_fixsrc")
<     for f in to_rm:
<         os.remove(f)
653,654c649
< for to_rm in [ "stoponerror", "sens_l_x", "sens_k_x", "sens_a_x", "sens_rr_x",
<                "sens_l_r", "sens_k_r", "sens_a_r", "sens_rr_r" ]:
---
> for to_rm in [ "stoponerror", "sens_l_x", "sens_k_x", "sens_a_x", "sens_rr_x", "sens_l_r", "sens_k_r", "sens_a_r", "sens_rr_r" ]:
802,812c797
<             log.write("error. alpha for "+inp+" is too negative for partisn.\n")
<             outf.close()
<             es=exit_sens(1)
<         elif re.search("processor mesh .gt. problem mesh", line):
<             print "error. bad number of processors for "+inp+"."
<             log.write("error. bad number of processors for "+inp+".\n")
<             outf.close()
<             es=exit_sens(1)
<         elif re.search(" nocore", line):
<             print "error. "+inp+" is too large for partisn."
<             log.write("error. "+inp+" is too large for partisn.\n")
---
>             log.write("error. alpah for "+inp+" is too negative for partisn.\n")
852,857c837
<             log.write("error. alpha for "+inp+" is too negative for partisn.\n")
<             outf.close()
<             es=exit_sens(1)
<         elif re.search(" nocore", line):
<             print "error. "+inp+" is too large for partisn."
<             log.write("error. "+inp+" is too large for partisn.\n")
---
>             log.write("error. alpah for "+inp+" is too negative for partisn.\n")
924,928d903
<                 elif re.search(" nocore", line):
<                     print "error. "+inp+" is too large for partisn."
<                     log.write("error. "+inp+" is too large for partisn.\n")
<                     outf.close()
<                     es=exit_sens(1)
